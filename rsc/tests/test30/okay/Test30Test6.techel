{
  # deploying contract `Test30`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test30`
      PUSH int 1352 ;
      # money transferred
      PUSH mutez 5626726804973 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool False ;
      # delegate
      {
        PUSH key "" ;
        BLAKE2B ;
        SOME
      } ;
      # manager
      {
        PUSH key "f" ;
        HASH_KEY
      }
    } ;
    CREATE_CONTRACT "Test30"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 376790484716535 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 422493758934868 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "d" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "43f" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
