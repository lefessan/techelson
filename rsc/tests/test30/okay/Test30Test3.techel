{
  # deploying contract `Test30`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test30`
      PUSH int 845347 ;
      # money transferred
      PUSH mutez 576460055909893 ;
      # delegatable
      PUSH bool True ;
      # spendable
      PUSH bool True ;
      # delegate
      {
        PUSH key "adfecc3bd0cc0bcb38ff1bd647f49a" ;
        HASH_KEY ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        SHA256
      }
    } ;
    CREATE_CONTRACT "Test30"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 270070966390317 ;
    {
      NIL int ;
      PUSH int 0 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      {
        PUSH int 6205723134 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 4 ;
        NEG
      } ;
      CONS ;
      PUSH int 24387447 ;
      CONS ;
      {
        PUSH int 254727546 ;
        NEG
      } ;
      CONS ;
      PUSH int 86 ;
      CONS ;
      {
        PUSH int 158385480641617615632440846206136852746 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 43571467 ;
        NEG
      } ;
      CONS ;
      PUSH int 15675285686 ;
      CONS ;
      PUSH int 273720 ;
      CONS ;
      {
        PUSH int 123778174513536255 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 4330277075255 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 173 ;
        NEG
      } ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 447494322250180 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "c" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 794054178240048 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 390130001768434 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 913221823384700 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 821129177991064 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "37ae4bf817bd3" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "9b" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 467143421472176 ;
    {
      NIL int ;
      PUSH int 635821488 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 7 ;
      CONS ;
      {
        PUSH int 4 ;
        NEG
      } ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 130768510931620 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "9cc1eacede" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 634439942933609 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 733906173885491 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "4e236fafa" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 102641264753113 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 213394943943241 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "38ec" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
