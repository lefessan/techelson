{
  # deploying contract `Test42`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test42`
      {
        PUSH int 5 ;
        NEG
      } ;
      # money transferred
      PUSH mutez 1885580408097666733 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool True ;
      # delegate
      {
        PUSH key "c824ff7dd5bb21f2" ;
        HASH_KEY ;
        SOME
      } ;
      # manager
      {
        PUSH key "859e6" ;
        HASH_KEY
      }
    } ;
    CREATE_CONTRACT "Test42"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test42`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 1475731864958619083 ;
    {
      {
        PUSH int 50457578 ;
        NEG
      } ;
      LEFT (or (unit %B) (pair %C int nat)) ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 267515842923158597 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "f33ded9db" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test42`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 2568035621999640951 ;
    {
      PUSH nat 71207338681362247 ;
      {
        PUSH int 8680152 ;
        NEG
      } ;
      PAIR ;
      RIGHT unit ;
      RIGHT int ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 734642510238501725 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
