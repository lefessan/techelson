{
  # deploying contract `Test30`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test30`
      PUSH int 743448317725721 ;
      # money transferred
      PUSH mutez 30983914268009 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool False ;
      # delegate
      {
        PUSH key "" ;
        HASH_KEY ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        BLAKE2B
      }
    } ;
    CREATE_CONTRACT "Test30"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 800939018562065 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 166487625743016 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 857510815236866 ;
    {
      NIL int ;
      {
        PUSH int 84482 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 635 ;
        NEG
      } ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 96090814809117 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 460348049577843 ;
    {
      NIL int ;
      {
        PUSH int 200331147871570834066448680 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 304 ;
        NEG
      } ;
      CONS ;
      PUSH int 5 ;
      CONS ;
      PUSH int 503277742756 ;
      CONS ;
      PUSH int 28725084 ;
      CONS ;
      {
        PUSH int 3 ;
        NEG
      } ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 306458988483934 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 56852173876520 ;
    {
      NIL int ;
      PUSH int 418428068560521567013 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      {
        PUSH int 1416265 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 53714472824363 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 23134 ;
        NEG
      } ;
      CONS ;
      PUSH int 3254 ;
      CONS ;
      {
        PUSH int 8 ;
        NEG
      } ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      {
        PUSH int 351885 ;
        NEG
      } ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 4761 ;
      CONS ;
      {
        PUSH int 24207210061652118 ;
        NEG
      } ;
      CONS ;
      PUSH int 62441031 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      {
        PUSH int 438 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 64268825678407 ;
        NEG
      } ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 2702078 ;
      CONS ;
      {
        PUSH int 4402 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 6840674 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 7285322465744 ;
        NEG
      } ;
      CONS ;
      PUSH int 6 ;
      CONS ;
      PUSH int 28622132764538418017728845017641117771831716345577 ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 732477704763195 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 703888501348012 ;
    {
      NIL int ;
      PUSH int 88112382775527643047 ;
      CONS ;
      PUSH int 45065726706 ;
      CONS ;
      {
        PUSH int 38656715012181324777833341 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 860751 ;
        NEG
      } ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 745646016274450 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          BLAKE2B ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 42240698010377 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 396276909119162 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 800304450350403 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 858171624454669 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "6" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
