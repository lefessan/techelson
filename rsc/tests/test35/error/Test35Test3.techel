{
  # deploying contract `Test35`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test35`
      PUSH int 0 ;
      # money transferred
      PUSH mutez 773466958270610 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool False ;
      # delegate
      {
        PUSH key "" ;
        HASH_KEY ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        BLAKE2B
      }
    } ;
    CREATE_CONTRACT "Test35"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (or :t (unit %A) (or (unit %B) (unit %C))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test35`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 484663035831964 ;
    {
      PUSH unit Unit ;
      RIGHT unit ;
      RIGHT unit ;
      RENAME :t
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (or :t (unit %A) (or (unit %B) (unit %C))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test35`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 72014848814108 ;
    {
      PUSH unit Unit ;
      LEFT (or (unit %B) (unit %C)) ;
      RENAME :t
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (or :t (unit %A) (or (unit %B) (unit %C))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test35`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 219905609634186 ;
    {
      PUSH unit Unit ;
      LEFT (or (unit %B) (unit %C)) ;
      RENAME :t
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (or :t (unit %A) (or (unit %B) (unit %C))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test35`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 793900693319704 ;
    {
      PUSH unit Unit ;
      LEFT (or (unit %B) (unit %C)) ;
      RENAME :t
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (or :t (unit %A) (or (unit %B) (unit %C))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test35`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 605581415471551 ;
    {
      PUSH unit Unit ;
      LEFT unit ;
      RIGHT unit ;
      RENAME :t
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (or :t (unit %A) (or (unit %B) (unit %C))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test35`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 546890478511080 ;
    {
      PUSH unit Unit ;
      LEFT (or (unit %B) (unit %C)) ;
      RENAME :t
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
