{
  # deploying contract `Test31`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test31`
      {
        PUSH int 54 ;
        NEG
      } ;
      # money transferred
      PUSH mutez 86504084367001 ;
      # delegatable
      PUSH bool True ;
      # spendable
      PUSH bool True ;
      # delegate
      {
        PUSH key "d859e6" ;
        HASH_KEY ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        SHA256
      }
    } ;
    CREATE_CONTRACT "Test31"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (option  int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test31`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 849003443402205 ;
    {
      NONE int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 770373929708720 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (option  int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test31`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 526855094985070 ;
    {
      NONE int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 451449452615851 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "0f4ad01691fddbb5659349b80b4bee9" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
