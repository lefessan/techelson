{
  # deploying contract `Test_call`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test_call`
      PUSH mutez 900275592067952 ;
      # money transferred
      PUSH mutez 888305686123022 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool False ;
      # delegate
      {
        PUSH key "" ;
        SHA256 ;
        SOME
      } ;
      # manager
      {
        PUSH key "6b8ce678f0d135549cf2" ;
        BLAKE2B
      }
    } ;
    CREATE_CONTRACT "Test_call"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 885635906695254 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 371233863502297 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "2368b2c2aeb" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 197777891245578 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 433863813952166 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 597110304454434 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 655522157421055 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "a3" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 460744853667999 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 464797858311815 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "a0dcccdd6" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 370488585970045 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 565425422056734 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 413303527090738 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 786662325807517 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "d" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "41acf7a1aa6" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 449672569422727 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 353290502460150 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 383640035489460 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 913221823384700 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "bf937ae4bf817bd3" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 568209355137826 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 461343060699960 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 732528360631211 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 586462133979873 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 762216703941180 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 238670562693284 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 612735983477378 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 54973998637002 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "355cf3faa6f" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 634439942933609 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 733906173885491 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "36fafa" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (contract :UnitContract unit) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_call`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 275655003778785 ;
    {
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 659289911009130 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      }
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
