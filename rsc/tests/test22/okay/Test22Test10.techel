{
  # deploying contract `Test22`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test22`
      {
        PUSH int 33857320575 ;
        NEG
      } ;
      # money transferred
      PUSH mutez 142422652757875 ;
      # delegatable
      PUSH bool True ;
      # spendable
      PUSH bool True ;
      # delegate
      NONE key_hash ;
      # manager
      {
        PUSH key "" ;
        SHA256
      }
    } ;
    CREATE_CONTRACT "Test22"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test22`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 352512621276979 ;
    {
      PUSH nat 0 ;
      PUSH int 0 ;
      PAIR ;
      RIGHT unit ;
      RIGHT int ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 842624407986285 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test22`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 685343243004789 ;
    {
      PUSH int 28872456305833 ;
      LEFT (or (unit %B) (pair %C int nat)) ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 614393956537618 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test22`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 126090074476801 ;
    {
      PUSH int 2456586317 ;
      LEFT (or (unit %B) (pair %C int nat)) ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 294109083273477 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test22`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 836401413438743 ;
    {
      PUSH nat 0 ;
      {
        PUSH int 657843461532887857 ;
        NEG
      } ;
      PAIR ;
      RIGHT unit ;
      RIGHT int ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 37836525478766 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "7bcc0dcecf" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test22`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 582598519236160 ;
    {
      PUSH int 1043448317725721 ;
      LEFT (or (unit %B) (pair %C int nat)) ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 848492290565886 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "29c2febbad4864af" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair
                   (contract :UnitContract unit)
                   (or :t (int %A) (or (unit %B) (pair %C int nat)))) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test22`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 460769925096306 ;
    {
      PUSH nat 0 ;
      PUSH int 0 ;
      PAIR ;
      RIGHT unit ;
      RIGHT int ;
      RENAME :t ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 386740706502998 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "bcb63654d3" ;
          SHA256 ;
          SOME
        } ;
        # manager
        {
          PUSH key "1cdc4c52dfdb01b3b8f915479cfaaeec" ;
          BLAKE2B
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter unit;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT unit ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
