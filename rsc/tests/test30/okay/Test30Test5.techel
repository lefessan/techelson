{
  # deploying contract `Test30`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test30`
      PUSH int 456 ;
      # money transferred
      PUSH mutez 558171940935546 ;
      # delegatable
      PUSH bool True ;
      # spendable
      PUSH bool True ;
      # delegate
      NONE key_hash ;
      # manager
      {
        PUSH key "834" ;
        HASH_KEY
      }
    } ;
    CREATE_CONTRACT "Test30"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 881800261115472 ;
    {
      NIL int ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 184244837462842 ;
        # delegatable
        PUSH bool False ;
        # spendable
        PUSH bool False ;
        # delegate
        NONE key_hash ;
        # manager
        {
          PUSH key "" ;
          HASH_KEY
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT (pair (contract :I int) (list int)) ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test30`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 877299477411516 ;
    {
      NIL int ;
      {
        PUSH int 407637863213238445 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 760176 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 657843461532887857 ;
        NEG
      } ;
      CONS ;
      {
        PUSH int 6101 ;
        NEG
      } ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 3576517858 ;
      CONS ;
      {
        PUSH int 84 ;
        NEG
      } ;
      CONS ;
      PUSH int 203456586317 ;
      CONS ;
      PUSH int 1273 ;
      CONS ;
      PUSH int 728872456305833 ;
      CONS ;
      PUSH int 0 ;
      CONS ;
      PUSH int 67208775208502432050200024368 ;
      CONS ;
      # creating contract creation parameters
      {
        PUSH unit Unit ;
        # money transferred
        PUSH mutez 452085222569321 ;
        # delegatable
        PUSH bool True ;
        # spendable
        PUSH bool True ;
        # delegate
        {
          PUSH key "" ;
          HASH_KEY ;
          SOME
        } ;
        # manager
        {
          PUSH key "" ;
          SHA256
        }
      } ;
      CREATE_CONTRACT {
          storage unit;
          parameter int;
          code {
                 # discarding inputs
                 DROP ;
                 PUSH unit Unit ;
                 NIL operation ;
                 PAIR
               };
      } ;
      # create a list of operations and apply
      {
        NIL operation ;
        SWAP ;
        CONS ;
        APPLY_OPERATIONS
      } ;
      # retrieve contract from address, fail if none
      {
        CONTRACT int ;
        IF_NONE {
                  PUSH string
                       "unable to spawn contract `test-generated anonymous contract`" ;
                  FAILWITH
                }
                {}
      } ;
      PAIR
    } ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
