{
  # deploying contract `Test_ifcons`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test_ifcons`
      {
        NIL string ;
        PUSH string "" ;
        CONS ;
        PUSH string "XdJeP" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "<VQ}&b8?r7)AIE8PX313S" ;
        CONS ;
        PUSH string "9:JhHawL1GJ6 BK6s.z=]^)" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "a$DlY3kn%67rc.{nl{GjM.Z<W}LhY>*'eOeV" ;
        CONS ;
        PUSH string "UrF=,pXv" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "" ;
        CONS ;
        PUSH string "z|e}YMwSC" ;
        CONS
      } ;
      # money transferred
      PUSH mutez 408088856789393 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool False ;
      # delegate
      {
        PUSH key "" ;
        BLAKE2B ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        SHA256
      }
    } ;
    CREATE_CONTRACT "Test_ifcons"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT string ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_ifcons`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 603098235537493 ;
    PUSH string "Zp8" ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT string ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_ifcons`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 142616662658232 ;
    PUSH string "tDS.-k" ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT string ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_ifcons`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 348261732690168 ;
    PUSH string "" ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT string ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_ifcons`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 732528360631211 ;
    PUSH string "" ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT string ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_ifcons`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 614072885946951 ;
    PUSH string "" ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT string ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_ifcons`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 883747629110602 ;
    PUSH string "" ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
